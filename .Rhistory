#################################
library(tensorflow)
library(keras)
install_tensorflow(envname = "r-reticulate")
library(keras)
install_keras(envname = "r-reticulate")
tf$constant("Hello Tensorflow!")
#################################
library(reticulate)
library(tensorflow)
library(keras)
install_tensorflow(envname = "r-reticulate")
install_keras(envname = "r-reticulate")
#################################
library(reticulate)
library(tensorflow)
library(keras)
install_keras(envname = "r-reticulate")
##############################################################################
#Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(plyr)
#################################
library(tensorflow)
library(keras)
library(data.table)
library(caret)
library(e1071)
library(DoubleML)
library(mlr3learners)
library(leaps)
library(mgcv)
library(gam)
library(dplyr)
tf$constant("Hello Tensorflow!")
##############################################################################
#Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#################################
library(tensorflow)
library(keras)
install_tensorflow()
##############################################################################
#Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(plyr)
#################################
library(tensorflow)
library(keras)
install_tensorflow()
##############################################################################
#Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(plyr)
#################################
library(tensorflow)
library(keras)
library(data.table)
library(caret)
library(e1071)
library(DoubleML)
library(leaps)
library(mgcv)
library(gam)
library(dplyr)
tf$constant("Hello Tensorflow!")
# Import data:
DATA = numeric(0)
DATA$Description = "all data"
DATA$EmissionsData = fread("C:/Users/eliot/OneDrive/Desktop/ECONPROJECT/COUNTY_EMISSIONS2021.csv")
DATA$PopulationData = fread("C:/Users/eliot/OneDrive/Desktop/ECONPROJECT/POPULATIONDATA2021.csv")
#Troubleshooting
print(setdiff(DATA$PopulationData$County,DATA$EmissionsData$County))
print(setdiff(DATA$EmissionsData$County,DATA$PopulationData$County))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(DoubleML)
library(foreign)
library(haven)
library(sandwich)
library(lmtest)
library(stargazer)
library(ggplot2)
library(ggpubr)
library(ggthemes)
r
library(DoubleML)
library(hdm)
library(glmnet)
library(DoubleML)
library(hdm)
library(glmnet)
library(xgboost)
library(data.table)
library(Matrix)
library(ggplot2)
library(tidyverse)
library(dplyr)
# Load the data
cagdp1 = read.csv("Panel Data/GDP-income/CAGDP1_ALL_Areas_2001_2022.csv")
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1_ALL_Areas_2001_2022.csv")
# Load the data
cagdp1 = read.csv("Panel_Data\GDP-income\CAGDP1__ALL_AREAS_2001_2022.csv")
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
summary(cagdp1)
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "x", ""), starts_with("x"))
summary(cagdp1)
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
cagdp2 = read.csv("Panel_Data/GDP-income/CAGDP2__ALL_AREAS_2001_2022.csv")
cagdp8 = read.csv("Panel_Data/GDP-income/CAGDP8__ALL_AREAS_2001_2022.csv")
cainc1 = read.csv("Panel_Data/GDP-income/CAINC1__ALL_AREAS_1969_2022.csv")
cainc30 = read.csv("Panel_Data/GDP-income/CAINC30__ALL_AREAS_1969_2022.csv")
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp2 <- cagdp2 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp8 <- cagdp8 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc1 <- cainc1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc30 <- cainc30 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
summary(cagdp1)
head(cagdp1)
# Separating cagdp1 by linecode/description
cagdp1_realgdp = cagdp1 %>% filter(LineCode == 1)
cagdp1_quantindex = cagdp1 %>% filter(LineCode == 2)
cagdp1_currdollgdp = cagdp1 %>% filter(LineCode == 3)
library(DoubleML)
library(hdm)
library(glmnet)
library(xgboost)
library(data.table)
library(Matrix)
library(ggplot2)
library(tidyverse)
library(dplyr)
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
cagdp2 = read.csv("Panel_Data/GDP-income/CAGDP2__ALL_AREAS_2001_2022.csv")
cagdp8 = read.csv("Panel_Data/GDP-income/CAGDP8__ALL_AREAS_2001_2022.csv")
cainc1 = read.csv("Panel_Data/GDP-income/CAINC1__ALL_AREAS_1969_2022.csv")
cainc30 = read.csv("Panel_Data/GDP-income/CAINC30__ALL_AREAS_1969_2022.csv")
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp2 <- cagdp2 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp8 <- cagdp8 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc1 <- cainc1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc30 <- cainc30 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
summary(cagdp1)
# Separating cagdp1 by linecode/description
cagdp1_realgdp = cagdp1 %>% filter(LineCode == 1)
cagdp1_quantindex = cagdp1 %>% filter(LineCode == 2)
cagdp1_currdollgdp = cagdp1 %>% filter(LineCode == 3)
summary(cagdp1_realgdp)
# Separating cagdp2 by linecode/description
summary(cagdp2)
# Separating cagdp2 by linecode/description
print(unique(cagdp2$LineCode))
# Separating cagdp2 by linecode/description
print(unique(cagdp2$Description))
print(unique(cagdp2$LineCode))
# Separating cagdp2 by linecode/description
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp2 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp1_", gsub(" ", "_", tolower(trimws(Description)))))  # Generate variable names
linecode_mapping
head(linecode_mapping)
tail(linecode_mapping)
# Print the mapping
print(linecode_description_mapping)
tail(cagdp2 %>% filter(LineCode==NA))
tail(cagdp2 %>% filter(is.na(LineCode)))
summary(cagdp1_realgdp)
cagdp2 = cagdp2 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cagdp1 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp1_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
tail(linecode_mapping)
head(linecode_mapping)
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
cagdp2 = read.csv("Panel_Data/GDP-income/CAGDP2__ALL_AREAS_2001_2022.csv")
cagdp8 = read.csv("Panel_Data/GDP-income/CAGDP8__ALL_AREAS_2001_2022.csv")
cainc1 = read.csv("Panel_Data/GDP-income/CAINC1__ALL_AREAS_1969_2022.csv")
cainc30 = read.csv("Panel_Data/GDP-income/CAINC30__ALL_AREAS_1969_2022.csv")
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp2 <- cagdp2 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp8 <- cagdp8 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc1 <- cainc1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc30 <- cainc30 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
summary(cagdp1)
# Separating cagdp1 by linecode/description
cagdp1_realgdp = cagdp1 %>% filter(LineCode == 1)
cagdp1_quantindex = cagdp1 %>% filter(LineCode == 2)
cagdp1_currdollgdp = cagdp1 %>% filter(LineCode == 3)
summary(cagdp1_realgdp)
# Separating cagdp2 by linecode/description
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp2 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp1_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
head(linecode_mapping)
tail(cagdp2 %>% filter(is.na(LineCode)))
cagdp2 = cagdp2 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cagdp1 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
cagdp2 = read.csv("Panel_Data/GDP-income/CAGDP2__ALL_AREAS_2001_2022.csv")
cagdp8 = read.csv("Panel_Data/GDP-income/CAGDP8__ALL_AREAS_2001_2022.csv")
cainc1 = read.csv("Panel_Data/GDP-income/CAINC1__ALL_AREAS_1969_2022.csv")
cainc30 = read.csv("Panel_Data/GDP-income/CAINC30__ALL_AREAS_1969_2022.csv")
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp2 <- cagdp2 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp8 <- cagdp8 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc1 <- cainc1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc30 <- cainc30 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
summary(cagdp1)
# Separating cagdp1 by linecode/description
cagdp1_realgdp = cagdp1 %>% filter(LineCode == 1)
cagdp1_quantindex = cagdp1 %>% filter(LineCode == 2)
cagdp1_currdollgdp = cagdp1 %>% filter(LineCode == 3)
summary(cagdp1_realgdp)
# Separating cagdp2 by linecode/description
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp2 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp2_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
head(linecode_mapping)
tail(cagdp2 %>% filter(is.na(LineCode)))
cagdp2 = cagdp2 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cagdp2 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
# Separating cagdp8 by linecode/description
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp8 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp8_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
head(linecode_mapping)
tail(cagdp8 %>% filter(is.na(LineCode)))
tail(cagdp8 %>% filter(is.na(LineCode)))
cagdp8 = cagdp8 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cagdp8 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
# Separating cainc1 by linecode/description
cainc1_personal_income = cainc1 %>% filter(LineCode == 1)
View(cainc1)
# Create a mapping of LineCode to Description
linecode_description_mapping <- cainc30 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cainc30_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
head(linecode_mapping)
head(linecode_mapping)
tail(linecode_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp2_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
tail(linecode_mapping)
# Separating cagdp2 by linecode/description
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp2 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
cagdp2 = read.csv("Panel_Data/GDP-income/CAGDP2__ALL_AREAS_2001_2022.csv")
# Load the data
cagdp1 = read.csv("Panel_Data/GDP-income/CAGDP1__ALL_AREAS_2001_2022.csv")
cagdp2 = read.csv("Panel_Data/GDP-income/CAGDP2__ALL_AREAS_2001_2022.csv")
cagdp8 = read.csv("Panel_Data/GDP-income/CAGDP8__ALL_AREAS_2001_2022.csv")
cainc1 = read.csv("Panel_Data/GDP-income/CAINC1__ALL_AREAS_1969_2022.csv")
cainc30 = read.csv("Panel_Data/GDP-income/CAINC30__ALL_AREAS_1969_2022.csv")
# Chainging colnames of x2001 - x2022 to 2001 - 2022
cagdp1 <- cagdp1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp2 <- cagdp2 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cagdp8 <- cagdp8 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc1 <- cainc1 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
cainc30 <- cainc30 %>% rename_with(~str_replace(., "X", ""), starts_with("X"))
summary(cagdp1)
# Separating cagdp1 by linecode/description
cagdp1_realgdp = cagdp1 %>% filter(LineCode == 1)
cagdp1_quantindex = cagdp1 %>% filter(LineCode == 2)
cagdp1_currdollgdp = cagdp1 %>% filter(LineCode == 3)
summary(cagdp1_realgdp)
# Using regex to remove extra digits at the end of descriptions
cagdp2$Description <- gsub("\\s\\d+/$", "", cagdp2$Description)
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp2 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp2_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
tail(linecode_mapping)
tail(cagdp2 %>% filter(is.na(LineCode)))
cagdp2 = cagdp2 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cagdp2 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
# Using regex to remove extra digits at the end of descriptions
cagdp8$Description <- gsub("\\s\\d+/$", "", cagdp8$Description)
# Create a mapping of LineCode to Description
linecode_description_mapping <- cagdp8 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cagdp8_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
head(linecode_mapping)
tail(cagdp8 %>% filter(is.na(LineCode)))
cagdp8 = cagdp8 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cagdp8 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
# Separating cainc1 by linecode/description
cainc1_personal_income = cainc1 %>% filter(LineCode == 1)
cainc1_population = cainc1 %>% filter(LineCode == 2)
cainc1_personal_income_per_capita = cainc1 %>% filter(LineCode == 3)
# Using regex to remove extra digits at the end of descriptions
cainc30$Description <- gsub("\\s\\d+/$", "", cainc30$Description)
# Create a mapping of LineCode to Description
linecode_description_mapping <- cainc30 %>%
select(LineCode, Description) %>%  # Select relevant columns
distinct() %>%  # Remove duplicates
arrange(LineCode)  # Sort by LineCode for clarity
# Print the mapping
print(linecode_description_mapping)
# Create a mapping of LineCode to variable names
linecode_mapping <- linecode_description_mapping %>%
filter(!is.na(LineCode)) %>%  # Exclude NA LineCode
mutate(var_name = paste0("cainc30_", gsub(",","",gsub(" ", "_", tolower(trimws(Description))))))  # Generate variable names
head(linecode_mapping)
tail(cainc30 %>% filter(is.na(LineCode)))
cainc30 = cainc30 %>% filter(!is.na(LineCode))
# Automate subset creation
for (i in seq_len(nrow(linecode_mapping))) {
assign(
linecode_mapping$var_name[i],
cainc30 %>% filter(LineCode == linecode_mapping$LineCode[i])
)
}
print(cagdp8 %>% filter(GeoFIPS == "\d\d+000"))
print(cagdp8 %>% filter(GeoFIPS == "\\d\\d+000"))
print(cagdp8 %>% filter(GeoFIPS == "\\d+000"))
print(cagdp8 %>% filter(GeoFIPS == "\\d000"))
print(cagdp8 %>% filter(GeoFIPS == "\\d\\d000"))
cagdp8$GeoFIPS = as.numeric(cagdp8$GeoFIPS)
print(cagdp8 %>% filter(GeoFIPS == "\\d\\d000"))
